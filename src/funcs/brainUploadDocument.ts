/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { IsoscelesCore } from "../core.js";
import { encodeSimple } from "../lib/encodings.js";
import { readableStreamToArrayBuffer } from "../lib/files.js";
import * as M from "../lib/matchers.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import * as components from "../models/components/index.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { SDKError } from "../models/errors/sdkerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { isBlobLike } from "../types/blobs.js";
import { Result } from "../types/fp.js";
import { isReadableStream } from "../types/streams.js";

/**
 * Upload Document
 */
export async function brainUploadDocument(
  client: IsoscelesCore,
  request: operations.UploadDocumentRequest,
  options?: RequestOptions,
): Promise<
  Result<
    components.Document,
    | errors.UploadDocumentResponseBody
    | errors.UploadDocumentBrainResponseBody
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  const parsed = safeParse(
    request,
    (value) => operations.UploadDocumentRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return parsed;
  }
  const payload = parsed.value;
  const body = new FormData();
  if (payload.RequestBody != null) {
    if (payload.RequestBody.file !== undefined) {
      if (isBlobLike(payload.RequestBody.file)) {
        body.append("file", payload.RequestBody.file);
      } else if (isReadableStream(payload.RequestBody.file.content)) {
        const buffer = await readableStreamToArrayBuffer(
          payload.RequestBody.file.content,
        );
        const blob = new Blob([buffer], { type: "application/octet-stream" });
        body.append("file", blob);
      } else {
        body.append(
          "file",
          new Blob([payload.RequestBody.file.content], {
            type: "application/octet-stream",
          }),
          payload.RequestBody.file.fileName,
        );
      }
    }
  }

  const pathParams = {
    brain_id: encodeSimple("brain_id", payload.brain_id, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc("/brain/{brain_id}/documents/file")(pathParams);

  const headers = new Headers({
    Accept: "application/json",
  });

  const securityInput = await extractSecurity(client._options.security);
  const context = {
    operationID: "upload_document",
    oAuth2Scopes: [],
    securitySource: client._options.security,
  };
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "POST",
    path: path,
    headers: headers,
    body: body,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return requestRes;
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "4XX", "500", "5XX"],
    retryConfig: options?.retries
      || client._options.retryConfig,
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  });
  if (!doResult.ok) {
    return doResult;
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    components.Document,
    | errors.UploadDocumentResponseBody
    | errors.UploadDocumentBrainResponseBody
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.json(200, components.Document$inboundSchema),
    M.jsonErr(400, errors.UploadDocumentResponseBody$inboundSchema),
    M.jsonErr(500, errors.UploadDocumentBrainResponseBody$inboundSchema),
    M.fail(["4XX", "5XX"]),
  )(response, { extraFields: responseFields });
  if (!result.ok) {
    return result;
  }

  return result;
}
