/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type Chat = {
  brainId: string;
  chatId: string;
  createdAt: string;
  createdFrom: string;
  lastUpdated: string;
  model: string;
  systemMessage: string;
  temperature: number | null;
  title: string;
  userId: string;
};

/** @internal */
export const Chat$inboundSchema: z.ZodType<Chat, z.ZodTypeDef, unknown> = z
  .object({
    brain_id: z.string(),
    chat_id: z.string(),
    created_at: z.string(),
    created_from: z.string(),
    last_updated: z.string(),
    model: z.string(),
    system_message: z.string(),
    temperature: z.nullable(z.number()),
    title: z.string(),
    user_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "brain_id": "brainId",
      "chat_id": "chatId",
      "created_at": "createdAt",
      "created_from": "createdFrom",
      "last_updated": "lastUpdated",
      "system_message": "systemMessage",
      "user_id": "userId",
    });
  });

/** @internal */
export type Chat$Outbound = {
  brain_id: string;
  chat_id: string;
  created_at: string;
  created_from: string;
  last_updated: string;
  model: string;
  system_message: string;
  temperature: number | null;
  title: string;
  user_id: string;
};

/** @internal */
export const Chat$outboundSchema: z.ZodType<Chat$Outbound, z.ZodTypeDef, Chat> =
  z.object({
    brainId: z.string(),
    chatId: z.string(),
    createdAt: z.string(),
    createdFrom: z.string(),
    lastUpdated: z.string(),
    model: z.string(),
    systemMessage: z.string(),
    temperature: z.nullable(z.number()),
    title: z.string(),
    userId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      brainId: "brain_id",
      chatId: "chat_id",
      createdAt: "created_at",
      createdFrom: "created_from",
      lastUpdated: "last_updated",
      systemMessage: "system_message",
      userId: "user_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Chat$ {
  /** @deprecated use `Chat$inboundSchema` instead. */
  export const inboundSchema = Chat$inboundSchema;
  /** @deprecated use `Chat$outboundSchema` instead. */
  export const outboundSchema = Chat$outboundSchema;
  /** @deprecated use `Chat$Outbound` instead. */
  export type Outbound = Chat$Outbound;
}
