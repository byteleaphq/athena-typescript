/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

export const ResponseLength = {
  Short: "SHORT",
  Medium: "MEDIUM",
  Long: "LONG",
} as const;
export type ResponseLength = ClosedEnum<typeof ResponseLength>;

export type Chat = {
  brainId?: string | undefined;
  chatId?: string | undefined;
  createdAt?: string | undefined;
  createdFrom?: string | undefined;
  lastUpdated?: string | undefined;
  model?: string | undefined;
  systemMessage?: string | undefined;
  temperature?: number | null | undefined;
  title?: string | undefined;
  userId?: string | undefined;
  responseLength?: ResponseLength | null | undefined;
};

/** @internal */
export const ResponseLength$inboundSchema: z.ZodNativeEnum<
  typeof ResponseLength
> = z.nativeEnum(ResponseLength);

/** @internal */
export const ResponseLength$outboundSchema: z.ZodNativeEnum<
  typeof ResponseLength
> = ResponseLength$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseLength$ {
  /** @deprecated use `ResponseLength$inboundSchema` instead. */
  export const inboundSchema = ResponseLength$inboundSchema;
  /** @deprecated use `ResponseLength$outboundSchema` instead. */
  export const outboundSchema = ResponseLength$outboundSchema;
}

/** @internal */
export const Chat$inboundSchema: z.ZodType<Chat, z.ZodTypeDef, unknown> = z
  .object({
    brain_id: z.string().optional(),
    chat_id: z.string().optional(),
    created_at: z.string().optional(),
    created_from: z.string().optional(),
    last_updated: z.string().optional(),
    model: z.string().optional(),
    system_message: z.string().optional(),
    temperature: z.nullable(z.number()).optional(),
    title: z.string().optional(),
    user_id: z.string().optional(),
    response_length: z.nullable(ResponseLength$inboundSchema.default("MEDIUM")),
  }).transform((v) => {
    return remap$(v, {
      "brain_id": "brainId",
      "chat_id": "chatId",
      "created_at": "createdAt",
      "created_from": "createdFrom",
      "last_updated": "lastUpdated",
      "system_message": "systemMessage",
      "user_id": "userId",
      "response_length": "responseLength",
    });
  });

/** @internal */
export type Chat$Outbound = {
  brain_id?: string | undefined;
  chat_id?: string | undefined;
  created_at?: string | undefined;
  created_from?: string | undefined;
  last_updated?: string | undefined;
  model?: string | undefined;
  system_message?: string | undefined;
  temperature?: number | null | undefined;
  title?: string | undefined;
  user_id?: string | undefined;
  response_length: string | null;
};

/** @internal */
export const Chat$outboundSchema: z.ZodType<Chat$Outbound, z.ZodTypeDef, Chat> =
  z.object({
    brainId: z.string().optional(),
    chatId: z.string().optional(),
    createdAt: z.string().optional(),
    createdFrom: z.string().optional(),
    lastUpdated: z.string().optional(),
    model: z.string().optional(),
    systemMessage: z.string().optional(),
    temperature: z.nullable(z.number()).optional(),
    title: z.string().optional(),
    userId: z.string().optional(),
    responseLength: z.nullable(ResponseLength$outboundSchema.default("MEDIUM")),
  }).transform((v) => {
    return remap$(v, {
      brainId: "brain_id",
      chatId: "chat_id",
      createdAt: "created_at",
      createdFrom: "created_from",
      lastUpdated: "last_updated",
      systemMessage: "system_message",
      userId: "user_id",
      responseLength: "response_length",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Chat$ {
  /** @deprecated use `Chat$inboundSchema` instead. */
  export const inboundSchema = Chat$inboundSchema;
  /** @deprecated use `Chat$outboundSchema` instead. */
  export const outboundSchema = Chat$outboundSchema;
  /** @deprecated use `Chat$Outbound` instead. */
  export type Outbound = Chat$Outbound;
}
