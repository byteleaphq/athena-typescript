/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

/**
 * Identifier for metadata object
 */
export type Metadata = {
  /**
   * Identifier for ISO language code
   */
  languageCode: string;
  /**
   * Identifier of the url for the original file
   */
  originalUrl: string;
  /**
   * URL link to access original object
   */
  originalObject: string;
  /**
   * Boolean to check whether the file is processed
   */
  processed: boolean;
};

export type Document = {
  /**
   * A unique identifier for the “brain” associated with this document or data object
   */
  brainId: string;
  /**
   * The timestamp indicating when the document or file was created
   */
  createdAt: string;
  /**
   * A unique identifier for the document associated with this object
   */
  documentId: string;
  /**
   * An internal ID for this object
   */
  id: number;
  /**
   * The name of the file or document
   */
  name: string;
  /**
   * The current status of the document processing.
   */
  status: string;
  /**
   * The type of the document or file
   */
  type: string;
  /**
   * A URL link to access or download the file. This is likely a temporary signed URL from AWS S3, as it includes authentication details and an expiration timestamp
   */
  url: string;
  /**
   * Identifier for metadata object
   */
  metadata: Metadata | null;
};

/** @internal */
export const Metadata$inboundSchema: z.ZodType<
  Metadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  language_code: z.string(),
  original_url: z.string(),
  original_object: z.string(),
  processed: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "language_code": "languageCode",
    "original_url": "originalUrl",
    "original_object": "originalObject",
  });
});

/** @internal */
export type Metadata$Outbound = {
  language_code: string;
  original_url: string;
  original_object: string;
  processed: boolean;
};

/** @internal */
export const Metadata$outboundSchema: z.ZodType<
  Metadata$Outbound,
  z.ZodTypeDef,
  Metadata
> = z.object({
  languageCode: z.string(),
  originalUrl: z.string(),
  originalObject: z.string(),
  processed: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    languageCode: "language_code",
    originalUrl: "original_url",
    originalObject: "original_object",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metadata$ {
  /** @deprecated use `Metadata$inboundSchema` instead. */
  export const inboundSchema = Metadata$inboundSchema;
  /** @deprecated use `Metadata$outboundSchema` instead. */
  export const outboundSchema = Metadata$outboundSchema;
  /** @deprecated use `Metadata$Outbound` instead. */
  export type Outbound = Metadata$Outbound;
}

/** @internal */
export const Document$inboundSchema: z.ZodType<
  Document,
  z.ZodTypeDef,
  unknown
> = z.object({
  brain_id: z.string(),
  created_at: z.string(),
  document_id: z.string(),
  id: z.number().int(),
  name: z.string(),
  status: z.string(),
  type: z.string(),
  url: z.string(),
  metadata: z.nullable(z.lazy(() => Metadata$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "brain_id": "brainId",
    "created_at": "createdAt",
    "document_id": "documentId",
  });
});

/** @internal */
export type Document$Outbound = {
  brain_id: string;
  created_at: string;
  document_id: string;
  id: number;
  name: string;
  status: string;
  type: string;
  url: string;
  metadata: Metadata$Outbound | null;
};

/** @internal */
export const Document$outboundSchema: z.ZodType<
  Document$Outbound,
  z.ZodTypeDef,
  Document
> = z.object({
  brainId: z.string(),
  createdAt: z.string(),
  documentId: z.string(),
  id: z.number().int(),
  name: z.string(),
  status: z.string(),
  type: z.string(),
  url: z.string(),
  metadata: z.nullable(z.lazy(() => Metadata$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    brainId: "brain_id",
    createdAt: "created_at",
    documentId: "document_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Document$ {
  /** @deprecated use `Document$inboundSchema` instead. */
  export const inboundSchema = Document$inboundSchema;
  /** @deprecated use `Document$outboundSchema` instead. */
  export const outboundSchema = Document$outboundSchema;
  /** @deprecated use `Document$Outbound` instead. */
  export type Outbound = Document$Outbound;
}
