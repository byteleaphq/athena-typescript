/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

/**
 * The type fo response interface
 */
export const ChatMessageType = {
  Text: "TEXT",
  Json: "JSON",
} as const;
/**
 * The type fo response interface
 */
export type ChatMessageType = ClosedEnum<typeof ChatMessageType>;

/**
 * Configure response length
 */
export const ResponseLength = {
  Short: "SHORT",
  Medium: "MEDIUM",
  Long: "LONG",
} as const;
/**
 * Configure response length
 */
export type ResponseLength = ClosedEnum<typeof ResponseLength>;

export type CreateChatThreadRequestBody = {
  /**
   * The ID of the brain to associate with the chat
   */
  brainId: string;
  /**
   * The name of the chat
   */
  name: string;
  /**
   * The type fo response interface
   */
  chatMessageType: ChatMessageType;
  /**
   * Configure response length
   */
  responseLength?: ResponseLength | null | undefined;
  /**
   * between 0 and 1
   */
  temperature?: number | null | undefined;
  /**
   * System message for the LLM
   */
  systemMessage?: string | null | undefined;
  /**
   * LLM Model to choose from
   */
  model?: string | null | undefined;
};

export const CreateChatThreadResponseLength = {
  Short: "SHORT",
  Medium: "MEDIUM",
  Long: "LONG",
} as const;
export type CreateChatThreadResponseLength = ClosedEnum<
  typeof CreateChatThreadResponseLength
>;

export const CreateChatThreadChatMessageType = {
  Text: "TEXT",
  Json: "JSON",
} as const;
export type CreateChatThreadChatMessageType = ClosedEnum<
  typeof CreateChatThreadChatMessageType
>;

export type CreateChatThreadResponseBody = {
  brainId?: string | undefined;
  chatId?: string | undefined;
  createdAt?: string | undefined;
  createdFrom?: string | undefined;
  lastUpdated?: string | undefined;
  model?: string | undefined;
  systemMessage?: string | undefined;
  temperature?: number | null | undefined;
  title?: string | undefined;
  userId?: string | undefined;
  responseLength?: CreateChatThreadResponseLength | null | undefined;
  chatMessageType?: CreateChatThreadChatMessageType | undefined;
};

/** @internal */
export const ChatMessageType$inboundSchema: z.ZodNativeEnum<
  typeof ChatMessageType
> = z.nativeEnum(ChatMessageType);

/** @internal */
export const ChatMessageType$outboundSchema: z.ZodNativeEnum<
  typeof ChatMessageType
> = ChatMessageType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatMessageType$ {
  /** @deprecated use `ChatMessageType$inboundSchema` instead. */
  export const inboundSchema = ChatMessageType$inboundSchema;
  /** @deprecated use `ChatMessageType$outboundSchema` instead. */
  export const outboundSchema = ChatMessageType$outboundSchema;
}

/** @internal */
export const ResponseLength$inboundSchema: z.ZodNativeEnum<
  typeof ResponseLength
> = z.nativeEnum(ResponseLength);

/** @internal */
export const ResponseLength$outboundSchema: z.ZodNativeEnum<
  typeof ResponseLength
> = ResponseLength$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseLength$ {
  /** @deprecated use `ResponseLength$inboundSchema` instead. */
  export const inboundSchema = ResponseLength$inboundSchema;
  /** @deprecated use `ResponseLength$outboundSchema` instead. */
  export const outboundSchema = ResponseLength$outboundSchema;
}

/** @internal */
export const CreateChatThreadRequestBody$inboundSchema: z.ZodType<
  CreateChatThreadRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  brain_id: z.string(),
  name: z.string(),
  chat_message_type: ChatMessageType$inboundSchema,
  response_length: z.nullable(ResponseLength$inboundSchema.default("MEDIUM")),
  temperature: z.nullable(z.number()).optional(),
  system_message: z.nullable(z.string()).optional(),
  model: z.nullable(z.string().default("gpt-4o-mini")),
}).transform((v) => {
  return remap$(v, {
    "brain_id": "brainId",
    "chat_message_type": "chatMessageType",
    "response_length": "responseLength",
    "system_message": "systemMessage",
  });
});

/** @internal */
export type CreateChatThreadRequestBody$Outbound = {
  brain_id: string;
  name: string;
  chat_message_type: string;
  response_length: string | null;
  temperature?: number | null | undefined;
  system_message?: string | null | undefined;
  model: string | null;
};

/** @internal */
export const CreateChatThreadRequestBody$outboundSchema: z.ZodType<
  CreateChatThreadRequestBody$Outbound,
  z.ZodTypeDef,
  CreateChatThreadRequestBody
> = z.object({
  brainId: z.string(),
  name: z.string(),
  chatMessageType: ChatMessageType$outboundSchema,
  responseLength: z.nullable(ResponseLength$outboundSchema.default("MEDIUM")),
  temperature: z.nullable(z.number()).optional(),
  systemMessage: z.nullable(z.string()).optional(),
  model: z.nullable(z.string().default("gpt-4o-mini")),
}).transform((v) => {
  return remap$(v, {
    brainId: "brain_id",
    chatMessageType: "chat_message_type",
    responseLength: "response_length",
    systemMessage: "system_message",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatThreadRequestBody$ {
  /** @deprecated use `CreateChatThreadRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateChatThreadRequestBody$inboundSchema;
  /** @deprecated use `CreateChatThreadRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateChatThreadRequestBody$outboundSchema;
  /** @deprecated use `CreateChatThreadRequestBody$Outbound` instead. */
  export type Outbound = CreateChatThreadRequestBody$Outbound;
}

/** @internal */
export const CreateChatThreadResponseLength$inboundSchema: z.ZodNativeEnum<
  typeof CreateChatThreadResponseLength
> = z.nativeEnum(CreateChatThreadResponseLength);

/** @internal */
export const CreateChatThreadResponseLength$outboundSchema: z.ZodNativeEnum<
  typeof CreateChatThreadResponseLength
> = CreateChatThreadResponseLength$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatThreadResponseLength$ {
  /** @deprecated use `CreateChatThreadResponseLength$inboundSchema` instead. */
  export const inboundSchema = CreateChatThreadResponseLength$inboundSchema;
  /** @deprecated use `CreateChatThreadResponseLength$outboundSchema` instead. */
  export const outboundSchema = CreateChatThreadResponseLength$outboundSchema;
}

/** @internal */
export const CreateChatThreadChatMessageType$inboundSchema: z.ZodNativeEnum<
  typeof CreateChatThreadChatMessageType
> = z.nativeEnum(CreateChatThreadChatMessageType);

/** @internal */
export const CreateChatThreadChatMessageType$outboundSchema: z.ZodNativeEnum<
  typeof CreateChatThreadChatMessageType
> = CreateChatThreadChatMessageType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatThreadChatMessageType$ {
  /** @deprecated use `CreateChatThreadChatMessageType$inboundSchema` instead. */
  export const inboundSchema = CreateChatThreadChatMessageType$inboundSchema;
  /** @deprecated use `CreateChatThreadChatMessageType$outboundSchema` instead. */
  export const outboundSchema = CreateChatThreadChatMessageType$outboundSchema;
}

/** @internal */
export const CreateChatThreadResponseBody$inboundSchema: z.ZodType<
  CreateChatThreadResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  brain_id: z.string().optional(),
  chat_id: z.string().optional(),
  created_at: z.string().optional(),
  created_from: z.string().optional(),
  last_updated: z.string().optional(),
  model: z.string().optional(),
  system_message: z.string().optional(),
  temperature: z.nullable(z.number()).optional(),
  title: z.string().optional(),
  user_id: z.string().optional(),
  response_length: z.nullable(
    CreateChatThreadResponseLength$inboundSchema.default("MEDIUM"),
  ),
  chat_message_type: CreateChatThreadChatMessageType$inboundSchema.default(
    "TEXT",
  ),
}).transform((v) => {
  return remap$(v, {
    "brain_id": "brainId",
    "chat_id": "chatId",
    "created_at": "createdAt",
    "created_from": "createdFrom",
    "last_updated": "lastUpdated",
    "system_message": "systemMessage",
    "user_id": "userId",
    "response_length": "responseLength",
    "chat_message_type": "chatMessageType",
  });
});

/** @internal */
export type CreateChatThreadResponseBody$Outbound = {
  brain_id?: string | undefined;
  chat_id?: string | undefined;
  created_at?: string | undefined;
  created_from?: string | undefined;
  last_updated?: string | undefined;
  model?: string | undefined;
  system_message?: string | undefined;
  temperature?: number | null | undefined;
  title?: string | undefined;
  user_id?: string | undefined;
  response_length: string | null;
  chat_message_type: string;
};

/** @internal */
export const CreateChatThreadResponseBody$outboundSchema: z.ZodType<
  CreateChatThreadResponseBody$Outbound,
  z.ZodTypeDef,
  CreateChatThreadResponseBody
> = z.object({
  brainId: z.string().optional(),
  chatId: z.string().optional(),
  createdAt: z.string().optional(),
  createdFrom: z.string().optional(),
  lastUpdated: z.string().optional(),
  model: z.string().optional(),
  systemMessage: z.string().optional(),
  temperature: z.nullable(z.number()).optional(),
  title: z.string().optional(),
  userId: z.string().optional(),
  responseLength: z.nullable(
    CreateChatThreadResponseLength$outboundSchema.default("MEDIUM"),
  ),
  chatMessageType: CreateChatThreadChatMessageType$outboundSchema.default(
    "TEXT",
  ),
}).transform((v) => {
  return remap$(v, {
    brainId: "brain_id",
    chatId: "chat_id",
    createdAt: "created_at",
    createdFrom: "created_from",
    lastUpdated: "last_updated",
    systemMessage: "system_message",
    userId: "user_id",
    responseLength: "response_length",
    chatMessageType: "chat_message_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatThreadResponseBody$ {
  /** @deprecated use `CreateChatThreadResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateChatThreadResponseBody$inboundSchema;
  /** @deprecated use `CreateChatThreadResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateChatThreadResponseBody$outboundSchema;
  /** @deprecated use `CreateChatThreadResponseBody$Outbound` instead. */
  export type Outbound = CreateChatThreadResponseBody$Outbound;
}
