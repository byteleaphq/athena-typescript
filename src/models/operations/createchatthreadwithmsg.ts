/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Configure response length
 */
export const CreateChatThreadWithMsgResponseLength = {
  Short: "SHORT",
  Medium: "MEDIUM",
  Long: "LONG",
} as const;
/**
 * Configure response length
 */
export type CreateChatThreadWithMsgResponseLength = ClosedEnum<
  typeof CreateChatThreadWithMsgResponseLength
>;

export const CreateChatThreadWithMsgChatMessageType = {
  Json: "JSON",
  Text: "TEXT",
} as const;
export type CreateChatThreadWithMsgChatMessageType = ClosedEnum<
  typeof CreateChatThreadWithMsgChatMessageType
>;

export type CreateChatThreadWithMsgRequestBody = {
  /**
   * The ID of the brain to associate with the chat
   */
  brainId: string;
  /**
   * The name of the chat
   */
  name: string;
  /**
   * The initial message to start the chat
   */
  message: string;
  /**
   * Configure response length
   */
  responseLength?: CreateChatThreadWithMsgResponseLength | null | undefined;
  /**
   * between 0 and 1
   */
  temperature?: number | null | undefined;
  /**
   * System message for the LLM
   */
  systemMessage?: string | null | undefined;
  /**
   * LLM Model to choose from
   */
  model?: string | null | undefined;
  chatMessageType?: CreateChatThreadWithMsgChatMessageType | undefined;
};

/** @internal */
export const CreateChatThreadWithMsgResponseLength$inboundSchema:
  z.ZodNativeEnum<typeof CreateChatThreadWithMsgResponseLength> = z.nativeEnum(
    CreateChatThreadWithMsgResponseLength,
  );

/** @internal */
export const CreateChatThreadWithMsgResponseLength$outboundSchema:
  z.ZodNativeEnum<typeof CreateChatThreadWithMsgResponseLength> =
    CreateChatThreadWithMsgResponseLength$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatThreadWithMsgResponseLength$ {
  /** @deprecated use `CreateChatThreadWithMsgResponseLength$inboundSchema` instead. */
  export const inboundSchema =
    CreateChatThreadWithMsgResponseLength$inboundSchema;
  /** @deprecated use `CreateChatThreadWithMsgResponseLength$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatThreadWithMsgResponseLength$outboundSchema;
}

/** @internal */
export const CreateChatThreadWithMsgChatMessageType$inboundSchema:
  z.ZodNativeEnum<typeof CreateChatThreadWithMsgChatMessageType> = z.nativeEnum(
    CreateChatThreadWithMsgChatMessageType,
  );

/** @internal */
export const CreateChatThreadWithMsgChatMessageType$outboundSchema:
  z.ZodNativeEnum<typeof CreateChatThreadWithMsgChatMessageType> =
    CreateChatThreadWithMsgChatMessageType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatThreadWithMsgChatMessageType$ {
  /** @deprecated use `CreateChatThreadWithMsgChatMessageType$inboundSchema` instead. */
  export const inboundSchema =
    CreateChatThreadWithMsgChatMessageType$inboundSchema;
  /** @deprecated use `CreateChatThreadWithMsgChatMessageType$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatThreadWithMsgChatMessageType$outboundSchema;
}

/** @internal */
export const CreateChatThreadWithMsgRequestBody$inboundSchema: z.ZodType<
  CreateChatThreadWithMsgRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  brain_id: z.string(),
  name: z.string(),
  message: z.string(),
  response_length: z.nullable(
    CreateChatThreadWithMsgResponseLength$inboundSchema.default("MEDIUM"),
  ),
  temperature: z.nullable(z.number()).optional(),
  system_message: z.nullable(z.string()).optional(),
  model: z.nullable(z.string().default("gpt-4o-mini")),
  chat_message_type: CreateChatThreadWithMsgChatMessageType$inboundSchema
    .default("TEXT"),
}).transform((v) => {
  return remap$(v, {
    "brain_id": "brainId",
    "response_length": "responseLength",
    "system_message": "systemMessage",
    "chat_message_type": "chatMessageType",
  });
});

/** @internal */
export type CreateChatThreadWithMsgRequestBody$Outbound = {
  brain_id: string;
  name: string;
  message: string;
  response_length: string | null;
  temperature?: number | null | undefined;
  system_message?: string | null | undefined;
  model: string | null;
  chat_message_type: string;
};

/** @internal */
export const CreateChatThreadWithMsgRequestBody$outboundSchema: z.ZodType<
  CreateChatThreadWithMsgRequestBody$Outbound,
  z.ZodTypeDef,
  CreateChatThreadWithMsgRequestBody
> = z.object({
  brainId: z.string(),
  name: z.string(),
  message: z.string(),
  responseLength: z.nullable(
    CreateChatThreadWithMsgResponseLength$outboundSchema.default("MEDIUM"),
  ),
  temperature: z.nullable(z.number()).optional(),
  systemMessage: z.nullable(z.string()).optional(),
  model: z.nullable(z.string().default("gpt-4o-mini")),
  chatMessageType: CreateChatThreadWithMsgChatMessageType$outboundSchema
    .default("TEXT"),
}).transform((v) => {
  return remap$(v, {
    brainId: "brain_id",
    responseLength: "response_length",
    systemMessage: "system_message",
    chatMessageType: "chat_message_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatThreadWithMsgRequestBody$ {
  /** @deprecated use `CreateChatThreadWithMsgRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateChatThreadWithMsgRequestBody$inboundSchema;
  /** @deprecated use `CreateChatThreadWithMsgRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatThreadWithMsgRequestBody$outboundSchema;
  /** @deprecated use `CreateChatThreadWithMsgRequestBody$Outbound` instead. */
  export type Outbound = CreateChatThreadWithMsgRequestBody$Outbound;
}
