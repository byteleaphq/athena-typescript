/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type GetIntegrationIntegrationNameListRequest = {
  /**
   * Currently supported integrations are "notion" and "confluence". More integrations will be added in the future.
   */
  integrationName: string;
};

/**
 * Content of the page
 */
export type Content = {};

export type GetIntegrationIntegrationNameListResponseBody = {
  /**
   * Content of the page
   */
  content?: Content | undefined;
  /**
   * Creation timestamp of the page
   */
  createdAt?: string | undefined;
  /**
   * ID of the page
   */
  id?: string | undefined;
  /**
   * Title of the page
   */
  title?: string | undefined;
  /**
   * Last updated timestamp of the page
   */
  updatedAt?: string | undefined;
  /**
   * URL of the page
   */
  url?: string | undefined;
};

/** @internal */
export const GetIntegrationIntegrationNameListRequest$inboundSchema: z.ZodType<
  GetIntegrationIntegrationNameListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  integration_name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "integration_name": "integrationName",
  });
});

/** @internal */
export type GetIntegrationIntegrationNameListRequest$Outbound = {
  integration_name: string;
};

/** @internal */
export const GetIntegrationIntegrationNameListRequest$outboundSchema: z.ZodType<
  GetIntegrationIntegrationNameListRequest$Outbound,
  z.ZodTypeDef,
  GetIntegrationIntegrationNameListRequest
> = z.object({
  integrationName: z.string(),
}).transform((v) => {
  return remap$(v, {
    integrationName: "integration_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIntegrationIntegrationNameListRequest$ {
  /** @deprecated use `GetIntegrationIntegrationNameListRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetIntegrationIntegrationNameListRequest$inboundSchema;
  /** @deprecated use `GetIntegrationIntegrationNameListRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetIntegrationIntegrationNameListRequest$outboundSchema;
  /** @deprecated use `GetIntegrationIntegrationNameListRequest$Outbound` instead. */
  export type Outbound = GetIntegrationIntegrationNameListRequest$Outbound;
}

/** @internal */
export const Content$inboundSchema: z.ZodType<Content, z.ZodTypeDef, unknown> =
  z.object({});

/** @internal */
export type Content$Outbound = {};

/** @internal */
export const Content$outboundSchema: z.ZodType<
  Content$Outbound,
  z.ZodTypeDef,
  Content
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Content$ {
  /** @deprecated use `Content$inboundSchema` instead. */
  export const inboundSchema = Content$inboundSchema;
  /** @deprecated use `Content$outboundSchema` instead. */
  export const outboundSchema = Content$outboundSchema;
  /** @deprecated use `Content$Outbound` instead. */
  export type Outbound = Content$Outbound;
}

/** @internal */
export const GetIntegrationIntegrationNameListResponseBody$inboundSchema:
  z.ZodType<
    GetIntegrationIntegrationNameListResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    content: z.lazy(() => Content$inboundSchema).optional(),
    created_at: z.string().optional(),
    id: z.string().optional(),
    title: z.string().optional(),
    updated_at: z.string().optional(),
    url: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type GetIntegrationIntegrationNameListResponseBody$Outbound = {
  content?: Content$Outbound | undefined;
  created_at?: string | undefined;
  id?: string | undefined;
  title?: string | undefined;
  updated_at?: string | undefined;
  url?: string | undefined;
};

/** @internal */
export const GetIntegrationIntegrationNameListResponseBody$outboundSchema:
  z.ZodType<
    GetIntegrationIntegrationNameListResponseBody$Outbound,
    z.ZodTypeDef,
    GetIntegrationIntegrationNameListResponseBody
  > = z.object({
    content: z.lazy(() => Content$outboundSchema).optional(),
    createdAt: z.string().optional(),
    id: z.string().optional(),
    title: z.string().optional(),
    updatedAt: z.string().optional(),
    url: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      createdAt: "created_at",
      updatedAt: "updated_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIntegrationIntegrationNameListResponseBody$ {
  /** @deprecated use `GetIntegrationIntegrationNameListResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetIntegrationIntegrationNameListResponseBody$inboundSchema;
  /** @deprecated use `GetIntegrationIntegrationNameListResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetIntegrationIntegrationNameListResponseBody$outboundSchema;
  /** @deprecated use `GetIntegrationIntegrationNameListResponseBody$Outbound` instead. */
  export type Outbound = GetIntegrationIntegrationNameListResponseBody$Outbound;
}
