/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type ApiKeys = {
  apiKey?: string | undefined;
  name?: string | undefined;
};

export type GetOrganisationGetApiKeysResponseBody = {
  apiKeys: Array<ApiKeys>;
  createdAt: string;
  email: string;
  id: number;
  name: string;
  orgName: string;
  orgUuid: string;
  role: string;
  token: string;
  userUuid: string;
};

/** @internal */
export const ApiKeys$inboundSchema: z.ZodType<ApiKeys, z.ZodTypeDef, unknown> =
  z.object({
    api_key: z.string().optional(),
    name: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "api_key": "apiKey",
    });
  });

/** @internal */
export type ApiKeys$Outbound = {
  api_key?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const ApiKeys$outboundSchema: z.ZodType<
  ApiKeys$Outbound,
  z.ZodTypeDef,
  ApiKeys
> = z.object({
  apiKey: z.string().optional(),
  name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    apiKey: "api_key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiKeys$ {
  /** @deprecated use `ApiKeys$inboundSchema` instead. */
  export const inboundSchema = ApiKeys$inboundSchema;
  /** @deprecated use `ApiKeys$outboundSchema` instead. */
  export const outboundSchema = ApiKeys$outboundSchema;
  /** @deprecated use `ApiKeys$Outbound` instead. */
  export type Outbound = ApiKeys$Outbound;
}

/** @internal */
export const GetOrganisationGetApiKeysResponseBody$inboundSchema: z.ZodType<
  GetOrganisationGetApiKeysResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  api_keys: z.array(z.lazy(() => ApiKeys$inboundSchema)),
  created_at: z.string(),
  email: z.string(),
  id: z.number().int(),
  name: z.string(),
  org_name: z.string(),
  org_uuid: z.string(),
  role: z.string(),
  token: z.string(),
  user_uuid: z.string(),
}).transform((v) => {
  return remap$(v, {
    "api_keys": "apiKeys",
    "created_at": "createdAt",
    "org_name": "orgName",
    "org_uuid": "orgUuid",
    "user_uuid": "userUuid",
  });
});

/** @internal */
export type GetOrganisationGetApiKeysResponseBody$Outbound = {
  api_keys: Array<ApiKeys$Outbound>;
  created_at: string;
  email: string;
  id: number;
  name: string;
  org_name: string;
  org_uuid: string;
  role: string;
  token: string;
  user_uuid: string;
};

/** @internal */
export const GetOrganisationGetApiKeysResponseBody$outboundSchema: z.ZodType<
  GetOrganisationGetApiKeysResponseBody$Outbound,
  z.ZodTypeDef,
  GetOrganisationGetApiKeysResponseBody
> = z.object({
  apiKeys: z.array(z.lazy(() => ApiKeys$outboundSchema)),
  createdAt: z.string(),
  email: z.string(),
  id: z.number().int(),
  name: z.string(),
  orgName: z.string(),
  orgUuid: z.string(),
  role: z.string(),
  token: z.string(),
  userUuid: z.string(),
}).transform((v) => {
  return remap$(v, {
    apiKeys: "api_keys",
    createdAt: "created_at",
    orgName: "org_name",
    orgUuid: "org_uuid",
    userUuid: "user_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrganisationGetApiKeysResponseBody$ {
  /** @deprecated use `GetOrganisationGetApiKeysResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetOrganisationGetApiKeysResponseBody$inboundSchema;
  /** @deprecated use `GetOrganisationGetApiKeysResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetOrganisationGetApiKeysResponseBody$outboundSchema;
  /** @deprecated use `GetOrganisationGetApiKeysResponseBody$Outbound` instead. */
  export type Outbound = GetOrganisationGetApiKeysResponseBody$Outbound;
}
