/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type BrainsPerOrganisation = {
  name: string;
  total: number;
};

export type ChatMessageCount = {
  name: string;
  total: number;
};

export type DocumentPerBrain = {
  name: string;
  total: number;
};

export type QueriesPerBrain = {
  name: string;
  total: number;
};

export type QueriesPerOrganisation = {
  name: string;
  total: number;
};

export type GetTenantAdminAnalyticsResponseBody = {
  brainsCount: number;
  brainsPerOrganisation: Array<BrainsPerOrganisation>;
  chatMessageCount: Array<ChatMessageCount>;
  documentCount: number;
  documentPerBrain: Array<DocumentPerBrain>;
  organisationCount: number;
  queriesPerBrain: Array<QueriesPerBrain>;
  queriesPerOrganisation: Array<QueriesPerOrganisation>;
  userCount: number;
};

/** @internal */
export const BrainsPerOrganisation$inboundSchema: z.ZodType<
  BrainsPerOrganisation,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  total: z.number().int(),
});

/** @internal */
export type BrainsPerOrganisation$Outbound = {
  name: string;
  total: number;
};

/** @internal */
export const BrainsPerOrganisation$outboundSchema: z.ZodType<
  BrainsPerOrganisation$Outbound,
  z.ZodTypeDef,
  BrainsPerOrganisation
> = z.object({
  name: z.string(),
  total: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BrainsPerOrganisation$ {
  /** @deprecated use `BrainsPerOrganisation$inboundSchema` instead. */
  export const inboundSchema = BrainsPerOrganisation$inboundSchema;
  /** @deprecated use `BrainsPerOrganisation$outboundSchema` instead. */
  export const outboundSchema = BrainsPerOrganisation$outboundSchema;
  /** @deprecated use `BrainsPerOrganisation$Outbound` instead. */
  export type Outbound = BrainsPerOrganisation$Outbound;
}

/** @internal */
export const ChatMessageCount$inboundSchema: z.ZodType<
  ChatMessageCount,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  total: z.number().int(),
});

/** @internal */
export type ChatMessageCount$Outbound = {
  name: string;
  total: number;
};

/** @internal */
export const ChatMessageCount$outboundSchema: z.ZodType<
  ChatMessageCount$Outbound,
  z.ZodTypeDef,
  ChatMessageCount
> = z.object({
  name: z.string(),
  total: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatMessageCount$ {
  /** @deprecated use `ChatMessageCount$inboundSchema` instead. */
  export const inboundSchema = ChatMessageCount$inboundSchema;
  /** @deprecated use `ChatMessageCount$outboundSchema` instead. */
  export const outboundSchema = ChatMessageCount$outboundSchema;
  /** @deprecated use `ChatMessageCount$Outbound` instead. */
  export type Outbound = ChatMessageCount$Outbound;
}

/** @internal */
export const DocumentPerBrain$inboundSchema: z.ZodType<
  DocumentPerBrain,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  total: z.number().int(),
});

/** @internal */
export type DocumentPerBrain$Outbound = {
  name: string;
  total: number;
};

/** @internal */
export const DocumentPerBrain$outboundSchema: z.ZodType<
  DocumentPerBrain$Outbound,
  z.ZodTypeDef,
  DocumentPerBrain
> = z.object({
  name: z.string(),
  total: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentPerBrain$ {
  /** @deprecated use `DocumentPerBrain$inboundSchema` instead. */
  export const inboundSchema = DocumentPerBrain$inboundSchema;
  /** @deprecated use `DocumentPerBrain$outboundSchema` instead. */
  export const outboundSchema = DocumentPerBrain$outboundSchema;
  /** @deprecated use `DocumentPerBrain$Outbound` instead. */
  export type Outbound = DocumentPerBrain$Outbound;
}

/** @internal */
export const QueriesPerBrain$inboundSchema: z.ZodType<
  QueriesPerBrain,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  total: z.number().int(),
});

/** @internal */
export type QueriesPerBrain$Outbound = {
  name: string;
  total: number;
};

/** @internal */
export const QueriesPerBrain$outboundSchema: z.ZodType<
  QueriesPerBrain$Outbound,
  z.ZodTypeDef,
  QueriesPerBrain
> = z.object({
  name: z.string(),
  total: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueriesPerBrain$ {
  /** @deprecated use `QueriesPerBrain$inboundSchema` instead. */
  export const inboundSchema = QueriesPerBrain$inboundSchema;
  /** @deprecated use `QueriesPerBrain$outboundSchema` instead. */
  export const outboundSchema = QueriesPerBrain$outboundSchema;
  /** @deprecated use `QueriesPerBrain$Outbound` instead. */
  export type Outbound = QueriesPerBrain$Outbound;
}

/** @internal */
export const QueriesPerOrganisation$inboundSchema: z.ZodType<
  QueriesPerOrganisation,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  total: z.number().int(),
});

/** @internal */
export type QueriesPerOrganisation$Outbound = {
  name: string;
  total: number;
};

/** @internal */
export const QueriesPerOrganisation$outboundSchema: z.ZodType<
  QueriesPerOrganisation$Outbound,
  z.ZodTypeDef,
  QueriesPerOrganisation
> = z.object({
  name: z.string(),
  total: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueriesPerOrganisation$ {
  /** @deprecated use `QueriesPerOrganisation$inboundSchema` instead. */
  export const inboundSchema = QueriesPerOrganisation$inboundSchema;
  /** @deprecated use `QueriesPerOrganisation$outboundSchema` instead. */
  export const outboundSchema = QueriesPerOrganisation$outboundSchema;
  /** @deprecated use `QueriesPerOrganisation$Outbound` instead. */
  export type Outbound = QueriesPerOrganisation$Outbound;
}

/** @internal */
export const GetTenantAdminAnalyticsResponseBody$inboundSchema: z.ZodType<
  GetTenantAdminAnalyticsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  brains_count: z.number().int(),
  brains_per_organisation: z.array(
    z.lazy(() => BrainsPerOrganisation$inboundSchema),
  ),
  chat_message_count: z.array(z.lazy(() => ChatMessageCount$inboundSchema)),
  document_count: z.number().int(),
  document_per_brain: z.array(z.lazy(() => DocumentPerBrain$inboundSchema)),
  organisation_count: z.number().int(),
  queries_per_brain: z.array(z.lazy(() => QueriesPerBrain$inboundSchema)),
  queries_per_organisation: z.array(
    z.lazy(() => QueriesPerOrganisation$inboundSchema),
  ),
  user_count: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "brains_count": "brainsCount",
    "brains_per_organisation": "brainsPerOrganisation",
    "chat_message_count": "chatMessageCount",
    "document_count": "documentCount",
    "document_per_brain": "documentPerBrain",
    "organisation_count": "organisationCount",
    "queries_per_brain": "queriesPerBrain",
    "queries_per_organisation": "queriesPerOrganisation",
    "user_count": "userCount",
  });
});

/** @internal */
export type GetTenantAdminAnalyticsResponseBody$Outbound = {
  brains_count: number;
  brains_per_organisation: Array<BrainsPerOrganisation$Outbound>;
  chat_message_count: Array<ChatMessageCount$Outbound>;
  document_count: number;
  document_per_brain: Array<DocumentPerBrain$Outbound>;
  organisation_count: number;
  queries_per_brain: Array<QueriesPerBrain$Outbound>;
  queries_per_organisation: Array<QueriesPerOrganisation$Outbound>;
  user_count: number;
};

/** @internal */
export const GetTenantAdminAnalyticsResponseBody$outboundSchema: z.ZodType<
  GetTenantAdminAnalyticsResponseBody$Outbound,
  z.ZodTypeDef,
  GetTenantAdminAnalyticsResponseBody
> = z.object({
  brainsCount: z.number().int(),
  brainsPerOrganisation: z.array(
    z.lazy(() => BrainsPerOrganisation$outboundSchema),
  ),
  chatMessageCount: z.array(z.lazy(() => ChatMessageCount$outboundSchema)),
  documentCount: z.number().int(),
  documentPerBrain: z.array(z.lazy(() => DocumentPerBrain$outboundSchema)),
  organisationCount: z.number().int(),
  queriesPerBrain: z.array(z.lazy(() => QueriesPerBrain$outboundSchema)),
  queriesPerOrganisation: z.array(
    z.lazy(() => QueriesPerOrganisation$outboundSchema),
  ),
  userCount: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    brainsCount: "brains_count",
    brainsPerOrganisation: "brains_per_organisation",
    chatMessageCount: "chat_message_count",
    documentCount: "document_count",
    documentPerBrain: "document_per_brain",
    organisationCount: "organisation_count",
    queriesPerBrain: "queries_per_brain",
    queriesPerOrganisation: "queries_per_organisation",
    userCount: "user_count",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTenantAdminAnalyticsResponseBody$ {
  /** @deprecated use `GetTenantAdminAnalyticsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetTenantAdminAnalyticsResponseBody$inboundSchema;
  /** @deprecated use `GetTenantAdminAnalyticsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetTenantAdminAnalyticsResponseBody$outboundSchema;
  /** @deprecated use `GetTenantAdminAnalyticsResponseBody$Outbound` instead. */
  export type Outbound = GetTenantAdminAnalyticsResponseBody$Outbound;
}
