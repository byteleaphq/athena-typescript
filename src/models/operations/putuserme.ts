/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type PutUserMeRequestBody = {
  firstName: string;
  lastName: string;
  phoneNumber: string;
};

export type PutUserMeResponseBody = {
  /**
   * Email ID of the user
   */
  email: string;
  /**
   * Clerk ID of the user
   */
  externalUserId: string;
  /**
   * First name of the user
   */
  firstName: string;
  /**
   * User ID
   */
  id: string;
  /**
   * Last name of the user
   */
  lastName: string;
  /**
   * Phone number of the user
   */
  phoneNumber: string;
};

/** @internal */
export const PutUserMeRequestBody$inboundSchema: z.ZodType<
  PutUserMeRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  first_name: z.string(),
  last_name: z.string(),
  phone_number: z.string(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "phone_number": "phoneNumber",
  });
});

/** @internal */
export type PutUserMeRequestBody$Outbound = {
  first_name: string;
  last_name: string;
  phone_number: string;
};

/** @internal */
export const PutUserMeRequestBody$outboundSchema: z.ZodType<
  PutUserMeRequestBody$Outbound,
  z.ZodTypeDef,
  PutUserMeRequestBody
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  phoneNumber: z.string(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    phoneNumber: "phone_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutUserMeRequestBody$ {
  /** @deprecated use `PutUserMeRequestBody$inboundSchema` instead. */
  export const inboundSchema = PutUserMeRequestBody$inboundSchema;
  /** @deprecated use `PutUserMeRequestBody$outboundSchema` instead. */
  export const outboundSchema = PutUserMeRequestBody$outboundSchema;
  /** @deprecated use `PutUserMeRequestBody$Outbound` instead. */
  export type Outbound = PutUserMeRequestBody$Outbound;
}

/** @internal */
export const PutUserMeResponseBody$inboundSchema: z.ZodType<
  PutUserMeResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
  external_user_id: z.string(),
  first_name: z.string(),
  id: z.string(),
  last_name: z.string(),
  phone_number: z.string(),
}).transform((v) => {
  return remap$(v, {
    "external_user_id": "externalUserId",
    "first_name": "firstName",
    "last_name": "lastName",
    "phone_number": "phoneNumber",
  });
});

/** @internal */
export type PutUserMeResponseBody$Outbound = {
  email: string;
  external_user_id: string;
  first_name: string;
  id: string;
  last_name: string;
  phone_number: string;
};

/** @internal */
export const PutUserMeResponseBody$outboundSchema: z.ZodType<
  PutUserMeResponseBody$Outbound,
  z.ZodTypeDef,
  PutUserMeResponseBody
> = z.object({
  email: z.string(),
  externalUserId: z.string(),
  firstName: z.string(),
  id: z.string(),
  lastName: z.string(),
  phoneNumber: z.string(),
}).transform((v) => {
  return remap$(v, {
    externalUserId: "external_user_id",
    firstName: "first_name",
    lastName: "last_name",
    phoneNumber: "phone_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutUserMeResponseBody$ {
  /** @deprecated use `PutUserMeResponseBody$inboundSchema` instead. */
  export const inboundSchema = PutUserMeResponseBody$inboundSchema;
  /** @deprecated use `PutUserMeResponseBody$outboundSchema` instead. */
  export const outboundSchema = PutUserMeResponseBody$outboundSchema;
  /** @deprecated use `PutUserMeResponseBody$Outbound` instead. */
  export type Outbound = PutUserMeResponseBody$Outbound;
}
