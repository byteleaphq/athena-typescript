/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type SearchDocumentsRequest = {
  /**
   * ID of the brain to search in
   */
  brainId: string;
  /**
   * Optional search query to filter documents
   */
  searchQuery?: string | undefined;
};

/** @internal */
export const SearchDocumentsRequest$inboundSchema: z.ZodType<
  SearchDocumentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  brain_id: z.string(),
  search_query: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "brain_id": "brainId",
    "search_query": "searchQuery",
  });
});

/** @internal */
export type SearchDocumentsRequest$Outbound = {
  brain_id: string;
  search_query?: string | undefined;
};

/** @internal */
export const SearchDocumentsRequest$outboundSchema: z.ZodType<
  SearchDocumentsRequest$Outbound,
  z.ZodTypeDef,
  SearchDocumentsRequest
> = z.object({
  brainId: z.string(),
  searchQuery: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    brainId: "brain_id",
    searchQuery: "search_query",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchDocumentsRequest$ {
  /** @deprecated use `SearchDocumentsRequest$inboundSchema` instead. */
  export const inboundSchema = SearchDocumentsRequest$inboundSchema;
  /** @deprecated use `SearchDocumentsRequest$outboundSchema` instead. */
  export const outboundSchema = SearchDocumentsRequest$outboundSchema;
  /** @deprecated use `SearchDocumentsRequest$Outbound` instead. */
  export type Outbound = SearchDocumentsRequest$Outbound;
}
