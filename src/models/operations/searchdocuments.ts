/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type SearchDocumentsRequest = {
  /**
   * ID of the brain to search in
   */
  brainId: string;
  /**
   * Optional search query to filter documents
   */
  searchQuery?: string | undefined;
};

export type Metadata = {
  languageCode: string;
  originalObject?: string | null | undefined;
  originalUrl: string;
  processed?: boolean | undefined;
};

export type ResponseBody = {
  brainId: string;
  createdAt: string;
  documentId: string;
  id: number;
  metadata: Metadata;
  name: string;
  status: string;
  type: string;
  url: string;
};

/** @internal */
export const SearchDocumentsRequest$inboundSchema: z.ZodType<
  SearchDocumentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  brain_id: z.string(),
  search_query: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "brain_id": "brainId",
    "search_query": "searchQuery",
  });
});

/** @internal */
export type SearchDocumentsRequest$Outbound = {
  brain_id: string;
  search_query?: string | undefined;
};

/** @internal */
export const SearchDocumentsRequest$outboundSchema: z.ZodType<
  SearchDocumentsRequest$Outbound,
  z.ZodTypeDef,
  SearchDocumentsRequest
> = z.object({
  brainId: z.string(),
  searchQuery: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    brainId: "brain_id",
    searchQuery: "search_query",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchDocumentsRequest$ {
  /** @deprecated use `SearchDocumentsRequest$inboundSchema` instead. */
  export const inboundSchema = SearchDocumentsRequest$inboundSchema;
  /** @deprecated use `SearchDocumentsRequest$outboundSchema` instead. */
  export const outboundSchema = SearchDocumentsRequest$outboundSchema;
  /** @deprecated use `SearchDocumentsRequest$Outbound` instead. */
  export type Outbound = SearchDocumentsRequest$Outbound;
}

/** @internal */
export const Metadata$inboundSchema: z.ZodType<
  Metadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  language_code: z.string(),
  original_object: z.nullable(z.string()).optional(),
  original_url: z.string(),
  processed: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "language_code": "languageCode",
    "original_object": "originalObject",
    "original_url": "originalUrl",
  });
});

/** @internal */
export type Metadata$Outbound = {
  language_code: string;
  original_object?: string | null | undefined;
  original_url: string;
  processed?: boolean | undefined;
};

/** @internal */
export const Metadata$outboundSchema: z.ZodType<
  Metadata$Outbound,
  z.ZodTypeDef,
  Metadata
> = z.object({
  languageCode: z.string(),
  originalObject: z.nullable(z.string()).optional(),
  originalUrl: z.string(),
  processed: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    languageCode: "language_code",
    originalObject: "original_object",
    originalUrl: "original_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metadata$ {
  /** @deprecated use `Metadata$inboundSchema` instead. */
  export const inboundSchema = Metadata$inboundSchema;
  /** @deprecated use `Metadata$outboundSchema` instead. */
  export const outboundSchema = Metadata$outboundSchema;
  /** @deprecated use `Metadata$Outbound` instead. */
  export type Outbound = Metadata$Outbound;
}

/** @internal */
export const ResponseBody$inboundSchema: z.ZodType<
  ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  brain_id: z.string(),
  created_at: z.string(),
  document_id: z.string(),
  id: z.number().int(),
  metadata: z.lazy(() => Metadata$inboundSchema),
  name: z.string(),
  status: z.string(),
  type: z.string(),
  url: z.string(),
}).transform((v) => {
  return remap$(v, {
    "brain_id": "brainId",
    "created_at": "createdAt",
    "document_id": "documentId",
  });
});

/** @internal */
export type ResponseBody$Outbound = {
  brain_id: string;
  created_at: string;
  document_id: string;
  id: number;
  metadata: Metadata$Outbound;
  name: string;
  status: string;
  type: string;
  url: string;
};

/** @internal */
export const ResponseBody$outboundSchema: z.ZodType<
  ResponseBody$Outbound,
  z.ZodTypeDef,
  ResponseBody
> = z.object({
  brainId: z.string(),
  createdAt: z.string(),
  documentId: z.string(),
  id: z.number().int(),
  metadata: z.lazy(() => Metadata$outboundSchema),
  name: z.string(),
  status: z.string(),
  type: z.string(),
  url: z.string(),
}).transform((v) => {
  return remap$(v, {
    brainId: "brain_id",
    createdAt: "created_at",
    documentId: "document_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBody$ {
  /** @deprecated use `ResponseBody$inboundSchema` instead. */
  export const inboundSchema = ResponseBody$inboundSchema;
  /** @deprecated use `ResponseBody$outboundSchema` instead. */
  export const outboundSchema = ResponseBody$outboundSchema;
  /** @deprecated use `ResponseBody$Outbound` instead. */
  export type Outbound = ResponseBody$Outbound;
}
