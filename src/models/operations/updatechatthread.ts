/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$ } from "../../lib/schemas.js";

export type UpdateChatThreadRequestBody = {
  /**
   * between 0 and 1
   */
  temperature?: number | null | undefined;
  /**
   * The updated name of the chat
   */
  name?: string | null | undefined;
  /**
   * System message for the LLM
   */
  systemMessage?: string | null | undefined;
  /**
   * New brain ID to update
   */
  brainId?: string | null | undefined;
  additionalProperties: { [k: string]: any };
};

export type UpdateChatThreadRequest = {
  chatId: string;
  requestBody?: UpdateChatThreadRequestBody | undefined;
};

/** @internal */
export const UpdateChatThreadRequestBody$inboundSchema: z.ZodType<
  UpdateChatThreadRequestBody,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    temperature: z.nullable(z.number()).optional(),
    name: z.nullable(z.string()).optional(),
    system_message: z.nullable(z.string()).optional(),
    brain_id: z.nullable(z.string()).optional(),
  }).catchall(z.any()),
  "additionalProperties",
).transform((v) => {
  return remap$(v, {
    "system_message": "systemMessage",
    "brain_id": "brainId",
  });
});

/** @internal */
export type UpdateChatThreadRequestBody$Outbound = {
  temperature?: number | null | undefined;
  name?: string | null | undefined;
  system_message?: string | null | undefined;
  brain_id?: string | null | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const UpdateChatThreadRequestBody$outboundSchema: z.ZodType<
  UpdateChatThreadRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateChatThreadRequestBody
> = z.object({
  temperature: z.nullable(z.number()).optional(),
  name: z.nullable(z.string()).optional(),
  systemMessage: z.nullable(z.string()).optional(),
  brainId: z.nullable(z.string()).optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      systemMessage: "system_message",
      brainId: "brain_id",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateChatThreadRequestBody$ {
  /** @deprecated use `UpdateChatThreadRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateChatThreadRequestBody$inboundSchema;
  /** @deprecated use `UpdateChatThreadRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateChatThreadRequestBody$outboundSchema;
  /** @deprecated use `UpdateChatThreadRequestBody$Outbound` instead. */
  export type Outbound = UpdateChatThreadRequestBody$Outbound;
}

/** @internal */
export const UpdateChatThreadRequest$inboundSchema: z.ZodType<
  UpdateChatThreadRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  chat_id: z.string(),
  RequestBody: z.lazy(() => UpdateChatThreadRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "chat_id": "chatId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateChatThreadRequest$Outbound = {
  chat_id: string;
  RequestBody?: UpdateChatThreadRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateChatThreadRequest$outboundSchema: z.ZodType<
  UpdateChatThreadRequest$Outbound,
  z.ZodTypeDef,
  UpdateChatThreadRequest
> = z.object({
  chatId: z.string(),
  requestBody: z.lazy(() => UpdateChatThreadRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    chatId: "chat_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateChatThreadRequest$ {
  /** @deprecated use `UpdateChatThreadRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateChatThreadRequest$inboundSchema;
  /** @deprecated use `UpdateChatThreadRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateChatThreadRequest$outboundSchema;
  /** @deprecated use `UpdateChatThreadRequest$Outbound` instead. */
  export type Outbound = UpdateChatThreadRequest$Outbound;
}
