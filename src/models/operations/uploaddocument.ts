/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { blobLikeSchema } from "../../types/blobs.js";

export type FileT = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

export type UploadDocumentRequestBody = {
  file?: FileT | Blob | undefined;
};

export type UploadDocumentRequest = {
  /**
   * The ID of the knowledge base to which the document belongs
   */
  brainId: string;
  requestBody?: UploadDocumentRequestBody | undefined;
};

/** @internal */
export const FileT$inboundSchema: z.ZodType<FileT, z.ZodTypeDef, unknown> = z
  .object({
    fileName: z.string(),
    content: z.union([
      z.instanceof(ReadableStream<Uint8Array>),
      z.instanceof(Blob),
      z.instanceof(ArrayBuffer),
      z.instanceof(Uint8Array),
    ]),
  });

/** @internal */
export type FileT$Outbound = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const FileT$outboundSchema: z.ZodType<
  FileT$Outbound,
  z.ZodTypeDef,
  FileT
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileT$ {
  /** @deprecated use `FileT$inboundSchema` instead. */
  export const inboundSchema = FileT$inboundSchema;
  /** @deprecated use `FileT$outboundSchema` instead. */
  export const outboundSchema = FileT$outboundSchema;
  /** @deprecated use `FileT$Outbound` instead. */
  export type Outbound = FileT$Outbound;
}

/** @internal */
export const UploadDocumentRequestBody$inboundSchema: z.ZodType<
  UploadDocumentRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  file: z.lazy(() => FileT$inboundSchema).optional(),
});

/** @internal */
export type UploadDocumentRequestBody$Outbound = {
  file?: FileT$Outbound | Blob | undefined;
};

/** @internal */
export const UploadDocumentRequestBody$outboundSchema: z.ZodType<
  UploadDocumentRequestBody$Outbound,
  z.ZodTypeDef,
  UploadDocumentRequestBody
> = z.object({
  file: z.lazy(() => FileT$outboundSchema).or(blobLikeSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadDocumentRequestBody$ {
  /** @deprecated use `UploadDocumentRequestBody$inboundSchema` instead. */
  export const inboundSchema = UploadDocumentRequestBody$inboundSchema;
  /** @deprecated use `UploadDocumentRequestBody$outboundSchema` instead. */
  export const outboundSchema = UploadDocumentRequestBody$outboundSchema;
  /** @deprecated use `UploadDocumentRequestBody$Outbound` instead. */
  export type Outbound = UploadDocumentRequestBody$Outbound;
}

/** @internal */
export const UploadDocumentRequest$inboundSchema: z.ZodType<
  UploadDocumentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  brain_id: z.string(),
  RequestBody: z.lazy(() => UploadDocumentRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "brain_id": "brainId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UploadDocumentRequest$Outbound = {
  brain_id: string;
  RequestBody?: UploadDocumentRequestBody$Outbound | undefined;
};

/** @internal */
export const UploadDocumentRequest$outboundSchema: z.ZodType<
  UploadDocumentRequest$Outbound,
  z.ZodTypeDef,
  UploadDocumentRequest
> = z.object({
  brainId: z.string(),
  requestBody: z.lazy(() => UploadDocumentRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    brainId: "brain_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadDocumentRequest$ {
  /** @deprecated use `UploadDocumentRequest$inboundSchema` instead. */
  export const inboundSchema = UploadDocumentRequest$inboundSchema;
  /** @deprecated use `UploadDocumentRequest$outboundSchema` instead. */
  export const outboundSchema = UploadDocumentRequest$outboundSchema;
  /** @deprecated use `UploadDocumentRequest$Outbound` instead. */
  export type Outbound = UploadDocumentRequest$Outbound;
}
