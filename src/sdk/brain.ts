/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { brainCreateBrain } from "../funcs/brainCreateBrain.js";
import { brainCreateDocumentWithUrl } from "../funcs/brainCreateDocumentWithUrl.js";
import { brainCreateTextDocument } from "../funcs/brainCreateTextDocument.js";
import { brainDeleteBrain } from "../funcs/brainDeleteBrain.js";
import { brainGetBrain } from "../funcs/brainGetBrain.js";
import { brainGetBrains } from "../funcs/brainGetBrains.js";
import { brainGetDocuments } from "../funcs/brainGetDocuments.js";
import { brainSearchDocuments } from "../funcs/brainSearchDocuments.js";
import { brainUpdateBrain } from "../funcs/brainUpdateBrain.js";
import { brainUploadDocument } from "../funcs/brainUploadDocument.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Brain extends ClientSDK {
  /**
   * Create Brain
   */
  async createBrain(
    request?: operations.CreateBrainRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<components.Brain> {
    return unwrapAsync(brainCreateBrain(
      this,
      request,
      options,
    ));
  }

  /**
   * Get All Brains
   */
  async getBrains(
    options?: RequestOptions,
  ): Promise<Array<components.Brain>> {
    return unwrapAsync(brainGetBrains(
      this,
      options,
    ));
  }

  /**
   * Create Text Document
   *
   * @remarks
   * Create documents in a brain with plain text representation
   */
  async createTextDocument(
    request: operations.CreateTextDocumentRequest,
    options?: RequestOptions,
  ): Promise<components.Document> {
    return unwrapAsync(brainCreateTextDocument(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Document by URL
   */
  async createDocumentWithUrl(
    request: operations.CreateDocumentWithUrlRequest,
    options?: RequestOptions,
  ): Promise<components.Document> {
    return unwrapAsync(brainCreateDocumentWithUrl(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Brain
   */
  async updateBrain(
    request: operations.UpdateBrainRequest,
    options?: RequestOptions,
  ): Promise<components.Brain> {
    return unwrapAsync(brainUpdateBrain(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Brain by ID
   */
  async getBrain(
    request: operations.GetBrainRequest,
    options?: RequestOptions,
  ): Promise<components.Brain> {
    return unwrapAsync(brainGetBrain(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Brain
   */
  async deleteBrain(
    request: operations.DeleteBrainRequest,
    options?: RequestOptions,
  ): Promise<components.DeleteResponse> {
    return unwrapAsync(brainDeleteBrain(
      this,
      request,
      options,
    ));
  }

  /**
   * List Documents
   */
  async getDocuments(
    request: operations.GetDocumentsRequest,
    options?: RequestOptions,
  ): Promise<Array<components.Document>> {
    return unwrapAsync(brainGetDocuments(
      this,
      request,
      options,
    ));
  }

  /**
   * Upload Document
   */
  async uploadDocument(
    request: operations.UploadDocumentRequest,
    options?: RequestOptions,
  ): Promise<components.Document> {
    return unwrapAsync(brainUploadDocument(
      this,
      request,
      options,
    ));
  }

  /**
   * Search documents
   *
   * @remarks
   * Search for documents within a specific brain
   */
  async searchDocuments(
    request: operations.SearchDocumentsRequest,
    options?: RequestOptions,
  ): Promise<Array<operations.ResponseBody>> {
    return unwrapAsync(brainSearchDocuments(
      this,
      request,
      options,
    ));
  }
}
