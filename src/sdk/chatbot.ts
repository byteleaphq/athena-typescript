/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { chatbotGetChatbotAnalytics } from "../funcs/chatbotGetChatbotAnalytics.js";
import { chatbotGetChatbotGetMessages } from "../funcs/chatbotGetChatbotGetMessages.js";
import { chatbotGetChatbotList } from "../funcs/chatbotGetChatbotList.js";
import { chatbotPostChatbotCreate } from "../funcs/chatbotPostChatbotCreate.js";
import { chatbotPostChatbotDelete } from "../funcs/chatbotPostChatbotDelete.js";
import { chatbotPostChatbotGet } from "../funcs/chatbotPostChatbotGet.js";
import { chatbotPostChatbotReset } from "../funcs/chatbotPostChatbotReset.js";
import { chatbotPostChatbotUpdate } from "../funcs/chatbotPostChatbotUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Chatbot extends ClientSDK {
  /**
   * Create Chatbot
   */
  async postChatbotCreate(
    request?: operations.PostChatbotCreateRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<Array<components.ChatbotResponse>> {
    return unwrapAsync(chatbotPostChatbotCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * List Chatbots
   */
  async getChatbotList(
    request: operations.GetChatbotListRequest,
    options?: RequestOptions,
  ): Promise<Array<components.ChatbotResponse>> {
    return unwrapAsync(chatbotGetChatbotList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Chatbot
   */
  async postChatbotGet(
    request: operations.PostChatbotGetRequest,
    options?: RequestOptions,
  ): Promise<components.ChatbotResponse> {
    return unwrapAsync(chatbotPostChatbotGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Chatbot analytics
   */
  async getChatbotAnalytics(
    request: operations.GetChatbotAnalyticsRequest,
    options?: RequestOptions,
  ): Promise<components.ChatbotAnalytics> {
    return unwrapAsync(chatbotGetChatbotAnalytics(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Chatbot messages
   *
   * @remarks
   * note: there is a limit of 10000 messages
   */
  async getChatbotGetMessages(
    request: operations.GetChatbotGetMessagesRequest,
    options?: RequestOptions,
  ): Promise<components.ChatbotMessages> {
    return unwrapAsync(chatbotGetChatbotGetMessages(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Chatbot
   */
  async postChatbotUpdate(
    request?: operations.PostChatbotUpdateRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<Array<components.ChatbotResponse>> {
    return unwrapAsync(chatbotPostChatbotUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Chatbot
   */
  async postChatbotDelete(
    request: operations.PostChatbotDeleteRequest,
    options?: RequestOptions,
  ): Promise<components.DeleteResponse> {
    return unwrapAsync(chatbotPostChatbotDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Reset Token
   */
  async postChatbotReset(
    request: operations.PostChatbotResetRequest,
    options?: RequestOptions,
  ): Promise<components.ChatbotResponse> {
    return unwrapAsync(chatbotPostChatbotReset(
      this,
      request,
      options,
    ));
  }
}
