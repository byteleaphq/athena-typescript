/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { integrationGetIntegrationIntegrationNameList } from "../funcs/integrationGetIntegrationIntegrationNameList.js";
import { integrationPostIntegrationIntegrationNameAdd } from "../funcs/integrationPostIntegrationIntegrationNameAdd.js";
import { integrationPostIntegrationIntegrationNameConnect } from "../funcs/integrationPostIntegrationIntegrationNameConnect.js";
import { integrationPostIntegrationIntegrationNameDisconnect } from "../funcs/integrationPostIntegrationIntegrationNameDisconnect.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Integration extends ClientSDK {
  /**
   * Connect
   */
  async postIntegrationIntegrationNameConnect(
    request: operations.PostIntegrationIntegrationNameConnectRequest,
    options?: RequestOptions,
  ): Promise<operations.PostIntegrationIntegrationNameConnectResponseBody> {
    return unwrapAsync(integrationPostIntegrationIntegrationNameConnect(
      this,
      request,
      options,
    ));
  }

  /**
   * Disconnect
   */
  async postIntegrationIntegrationNameDisconnect(
    request: operations.PostIntegrationIntegrationNameDisconnectRequest,
    options?: RequestOptions,
  ): Promise<operations.PostIntegrationIntegrationNameDisconnectResponseBody> {
    return unwrapAsync(integrationPostIntegrationIntegrationNameDisconnect(
      this,
      request,
      options,
    ));
  }

  /**
   * List
   *
   * @remarks
   * list pages from integration
   */
  async getIntegrationIntegrationNameList(
    request: operations.GetIntegrationIntegrationNameListRequest,
    options?: RequestOptions,
  ): Promise<Array<operations.ResponseBody>> {
    return unwrapAsync(integrationGetIntegrationIntegrationNameList(
      this,
      request,
      options,
    ));
  }

  /**
   * Add To Brain
   *
   * @remarks
   * used to add pages to brain
   */
  async postIntegrationIntegrationNameAdd(
    request: operations.PostIntegrationIntegrationNameAddRequest,
    options?: RequestOptions,
  ): Promise<operations.PostIntegrationIntegrationNameAddResponseBody> {
    return unwrapAsync(integrationPostIntegrationIntegrationNameAdd(
      this,
      request,
      options,
    ));
  }
}
