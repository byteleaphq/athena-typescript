/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { addApiKey } from "../funcs/addApiKey.js";
import { getOrganisationGetApiKeys } from "../funcs/getOrganisationGetApiKeys.js";
import { getTenantAdminAnalytics } from "../funcs/getTenantAdminAnalytics.js";
import { getTenantAdminUsers } from "../funcs/getTenantAdminUsers.js";
import { getUserMe } from "../funcs/getUserMe.js";
import { postOrganisationRemoveApiKey } from "../funcs/postOrganisationRemoveApiKey.js";
import { putTenantAdminUsersUserId } from "../funcs/putTenantAdminUsersUserId.js";
import { putUserMe } from "../funcs/putUserMe.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { Brain } from "./brain.js";
import { Chat } from "./chat.js";
import { Chatbot } from "./chatbot.js";
import { Document } from "./document.js";
import { Integration } from "./integration.js";
import { Ogranisation } from "./ogranisation.js";

export class Isosceles extends ClientSDK {
  private _brain?: Brain;
  get brain(): Brain {
    return (this._brain ??= new Brain(this._options));
  }

  private _document?: Document;
  get document(): Document {
    return (this._document ??= new Document(this._options));
  }

  private _chat?: Chat;
  get chat(): Chat {
    return (this._chat ??= new Chat(this._options));
  }

  private _chatbot?: Chatbot;
  get chatbot(): Chatbot {
    return (this._chatbot ??= new Chatbot(this._options));
  }

  private _integration?: Integration;
  get integration(): Integration {
    return (this._integration ??= new Integration(this._options));
  }

  private _ogranisation?: Ogranisation;
  get ogranisation(): Ogranisation {
    return (this._ogranisation ??= new Ogranisation(this._options));
  }

  /**
   * Get API Keys
   */
  async getOrganisationGetApiKeys(
    options?: RequestOptions,
  ): Promise<operations.GetOrganisationGetApiKeysResponseBody> {
    return unwrapAsync(getOrganisationGetApiKeys(
      this,
      options,
    ));
  }

  /**
   * Delete API Key
   */
  async postOrganisationRemoveApiKey(
    request?: operations.PostOrganisationRemoveApiKeyRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.PostOrganisationRemoveApiKeyResponseBody> {
    return unwrapAsync(postOrganisationRemoveApiKey(
      this,
      request,
      options,
    ));
  }

  /**
   * Create API Key
   */
  async addApiKey(
    request?: operations.AddApiKeyRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.AddApiKeyResponseBody> {
    return unwrapAsync(addApiKey(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Analytics
   */
  async getTenantAdminAnalytics(
    options?: RequestOptions,
  ): Promise<operations.GetTenantAdminAnalyticsResponseBody> {
    return unwrapAsync(getTenantAdminAnalytics(
      this,
      options,
    ));
  }

  /**
   * Get All Users
   */
  async getTenantAdminUsers(
    options?: RequestOptions,
  ): Promise<operations.GetTenantAdminUsersResponseBody> {
    return unwrapAsync(getTenantAdminUsers(
      this,
      options,
    ));
  }

  /**
   * Update credits
   */
  async putTenantAdminUsersUserId(
    request: operations.PutTenantAdminUsersUserIdRequest,
    options?: RequestOptions,
  ): Promise<operations.PutTenantAdminUsersUserIdResponseBody> {
    return unwrapAsync(putTenantAdminUsersUserId(
      this,
      request,
      options,
    ));
  }

  /**
   * Get User details
   */
  async getUserMe(
    options?: RequestOptions,
  ): Promise<operations.GetUserMeResponseBody> {
    return unwrapAsync(getUserMe(
      this,
      options,
    ));
  }

  /**
   * Update User
   */
  async putUserMe(
    request?: operations.PutUserMeRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.PutUserMeResponseBody> {
    return unwrapAsync(putUserMe(
      this,
      request,
      options,
    ));
  }
}
